openapi: 3.0.3
info:
  title: TypeScript Node API
  description: Clean Architecture DDD TypeScript Node.js APIのドキュメント
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
servers:
  - url: http://localhost:3000/api/v1
    description: 開発サーバー
  - url: https://api.example.com/v1
    description: 本番サーバー
tags:
  - name: Users
    description: ユーザー管理に関するエンドポイント
  - name: Authentication
    description: 認証に関するエンドポイント
paths:
  /users:
    get:
      tags:
        - Users
      summary: ユーザー一覧を取得
      description: 登録されている全ユーザーの一覧を取得します
      operationId: getAllUsers
      parameters:
        - name: page
          in: query
          description: ページ番号
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: 1ページあたりの表示件数
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Users
      summary: 新規ユーザーを作成
      description: 新しいユーザーを作成します
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: 作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{userId}:
    get:
      tags:
        - Users
      summary: ユーザー詳細を取得
      description: 指定されたIDのユーザー情報を取得します
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ユーザーID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Users
      summary: ユーザー情報を更新
      description: 指定されたIDのユーザー情報を更新します
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: ユーザーID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Users
      summary: ユーザーを削除
      description: 指定されたIDのユーザーを削除します
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: ユーザーID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: 削除成功
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/login:
    post:
      tags:
        - Authentication
      summary: ログイン
      description: メールアドレスとパスワードでログインします
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: password123
      responses:
        '200':
          description: ログイン成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: アクセストークン
                  refreshToken:
                    type: string
                    description: リフレッシュトークン
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: 認証失敗
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/logout:
    post:
      tags:
        - Authentication
      summary: ログアウト
      description: 現在のセッションからログアウトします
      operationId: logout
      security:
        - bearerAuth: []
      responses:
        '204':
          description: ログアウト成功
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: トークンをリフレッシュ
      description: リフレッシュトークンを使用して新しいアクセストークンを取得します
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  description: リフレッシュトークン
      responses:
        '200':
          description: リフレッシュ成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: 新しいアクセストークン
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ユーザーID
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          format: email
          description: メールアドレス
          example: user@example.com
        name:
          type: string
          description: 氏名
          example: 山田太郎
        role:
          type: string
          enum: [admin, user]
          description: ユーザーロール
          example: user
        createdAt:
          type: string
          format: date-time
          description: 作成日時
          example: 2024-01-01T00:00:00Z
        updatedAt:
          type: string
          format: date-time
          description: 更新日時
          example: 2024-01-01T00:00:00Z
    CreateUserRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
          description: メールアドレス
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 8
          description: パスワード
          example: password123
        name:
          type: string
          description: 氏名
          example: 山田太郎
        role:
          type: string
          enum: [admin, user]
          default: user
          description: ユーザーロール
    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: メールアドレス
        name:
          type: string
          description: 氏名
        role:
          type: string
          enum: [admin, user]
          description: ユーザーロール
    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: 現在のページ番号
          example: 1
        limit:
          type: integer
          description: 1ページあたりの件数
          example: 20
        total:
          type: integer
          description: 総件数
          example: 100
        totalPages:
          type: integer
          description: 総ページ数
          example: 5
    Error:
      type: object
      properties:
        code:
          type: string
          description: エラーコード
          example: VALIDATION_ERROR
        message:
          type: string
          description: エラーメッセージ
          example: 入力値が不正です
        details:
          type: array
          description: エラーの詳細
          items:
            type: object
            properties:
              field:
                type: string
                description: エラーが発生したフィールド
              message:
                type: string
                description: フィールド固有のエラーメッセージ
  responses:
    BadRequest:
      description: リクエストが不正です
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: 認証が必要です
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: リソースが見つかりません
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: リソースの競合が発生しました
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: サーバー内部エラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer形式のJWTトークンを使用した認証
security:
  - bearerAuth: []